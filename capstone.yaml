AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a PHP application with MySQL database on AWS

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
    Description: EC2 instance type for PHP application

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
    Description: RDS instance type for MySQL database

  AMIId:
    Type: String
    Description: The ID of the AMI to use for the EC2 instance

  KeyName:
    Type: String
    Description: The name of the key pair to use for SSH access

  DBPassword:
    Type: String
    NoEcho: true
    Description: The password for the RDS master user

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: ExampleVPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ExampleIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Elastic IP for NAT Gateway
  EIP:
    Type: AWS::EC2::EIP

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: ExampleNATGW

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Routes:
        - DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Routes:
        - DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Security Groups
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH access to PHP application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          CidrIp: 10.0.2.0/24

  # RDS Database
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBName: inventoryDB
      AllocatedStorage: "20"
      BackupRetentionPeriod: "7"
      VPCSecurityGroups:
        - !Ref DbSecurityGroup
      PubliclyAccessible: "false"
      MultiAZ: "true"
      StorageType: gp3
      Tags:
        - Key: Name
          Value: MySQLDatabase

  # EC2 Instance
  AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: PHPAppInstance

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: "1"
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: AutoScalingGroup
          PropagateAtLaunch: "true"

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Lab-LB
      Subnets:
        - !Ref PublicSubnet
      SecurityGroups:
        - !Ref AppSecurityGroup
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  # Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: "200"
            ContentType: text/plain
            MessageBody: "OK"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  WebsiteURL:
    Description: "URL of the deployed website"
    Value: !Sub "http://${LoadBalancer}/"
